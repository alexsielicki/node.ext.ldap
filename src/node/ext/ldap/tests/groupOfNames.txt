Test for users and groups defined in ug-groupOfNames.ldif::

    >>> from node.ext.ldap import Groups
    >>> from node.ext.ldap import Users

    >>> users = Users(layer['props'], layer['ucfg'])
    >>> users.keys()
    [u'uid0', u'uid1', u'uid2']

    >>> user0 = users['uid0']
    >>> user1 = users['uid1']
    >>> user2 = users['uid2']

    >>> user0
    <User 'uid0'>
    >>> user0.__class__
    <class 'node.ext.ldap.ugm.User'>

    >>> groups = Groups(layer['props'], layer['gcfg'])

Groups needs to know where to fetch users from::

    >>> groups.users = users
    >>> groups.keys()
    [u'group0', u'group1', u'group2']

    >>> group0 = groups['group0']
    >>> group1 = groups['group1']
    >>> group2 = groups['group2']

    >>> group0
    <Group 'group0'>
    >>> group0.__class__
    <class 'node.ext.ldap.ugm.Group'>

A group returns the members ids as keys::     

    >>> group0.keys()
    []
    >>> group1.keys()
    [u'uid1']
    >>> group2.keys()
    [u'uid1', u'uid2']

The member users are fetched via ``getitem``::

    >>> group1['uid1']
    <User 'uid1'>

XXX: This is not yet true as users creates a new node on every getitem::

    >>> group1['uid1'] is user1
    False

Querying a group for a non-member results in a KeyError::

    >>> group0['uid1']
    Traceback (most recent call last):
      ...
    KeyError: 'uid1'

Members are added via ``add``::

    >>> group1.add(user0)
    >>> group1.keys()
    [u'uid1', u'uid0']
    >>> group1['uid0']
    <User 'uid0'>

Let's take a fresh view on ldap whether this really happened::

    >>> groups_fresh = Groups(layer['props'], layer['gcfg'])
    >>> groups_fresh.users = users
    >>> groups_fresh['group1'].keys()
    [u'uid1', u'uid0']

Members are removed via ``delitem``::

    >>> del group1['uid0']
    >>> groups_fresh = Groups(layer['props'], layer['gcfg'])
    >>> groups_fresh.users = users
    >>> groups_fresh['group1'].keys()
    [u'uid1']

Once users knows groups, a user knows its groups::

    >>> users.groups = groups
    >>> user0.groups.keys()
    []
    >>> user1.groups.keys()
    [u'group1', u'group2']
    >>> user2.groups.keys()
    [u'group2']

and is able to return them::

    >>> user0.groups['group1']
    Traceback (most recent call last):
      ...
    KeyError: 'group1'

    >>> user1.groups['group1']
    <Group 'group1'>

and can remove and add itself to them::

    >>> group1.keys()
    [u'uid1']
    >>> user2.groups.add(group1)
    >>> group1.keys()
    [u'uid1', u'uid2']
    >>> del user2.groups[group1.id]
    >>> group1.keys()
    [u'uid1']
