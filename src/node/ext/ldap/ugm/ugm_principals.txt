# -*- coding: utf-8 -*-

Get an LDAPUsers node and configure it. In addition to the key attribute, the
login attribute also needs to be unique, which will be checked upon calling
ids() the first time::

    >>> from node.ext.ldap.properties import LDAPProps
    >>> from node.ext.ldap.ugm import Users, UsersConfig
    >>> from node.ext.ldap import SUBTREE

    >>> from node.ext.ldap.testing import props, ucfg
    >>> users = Users(props, ucfg)

Query all user ids. ``description`` is missing on some::

    >>> users.ids
    Traceback (most recent call last):
    ...
    KeyError:
      u"Secondary key 'description' missing on: cn=user1,dc=my-domain,dc=com."

Query all user ids. ``telephoneNumber`` is not unique::

    >>> ucfg.attrmap['login'] = 'telephoneNumber'
    >>> users = Users(props, ucfg)
    >>> users.ids
    Traceback (most recent call last):
    ...
    KeyError: u"Secondary key not unique: telephoneNumber='1234'."

Query all user ids. ``cn`` finally in this case is unique and therefore
suitable as login attr::

    >>> ucfg.attrmap['login'] = 'cn'
    >>> users = Users(props, ucfg)
    >>> users.ids
    [u'Meier', u'M\xfcller', u'Schmidt', u'Umhauer']

Query a user by id (utf-8 or unicode)::

    >>> mueller = users['Müller']
    >>> mueller
    <User object 'M?ller' at ...>
    
    >>> mueller.context
    <cn=user2,ou=customers,dc=my-domain,dc=com:M?ller - False>

XXX: No caching of factored objects yet::

    >>> mueller is users['Müller']
    False


########
XXX: maybe later

Find a user by login::

    >> users.idbylogin(mueller.login) == mueller.id
    True

Using idbylogin before calling .ids() works - was a bug::

    >> users2 = LDAPUsers(props, ucfg)
    >> users2.idbylogin(mueller.login) == mueller.id
    True
########

The '?' is just __repr__ going to ascii, the id is in proper unicode::

    >>> mueller.id
    u'M\xfcller'

A user has a login::

    >>> mueller.login
    u'user2'

And attributes::

    >>> mueller.attrs
    Aliased <LDAPNodeAttributes object 'M?ller' at ...>
    
    >>> mueller.attrs.items()
    [('telephoneNumber', u'1234'), ('login', u'user2'), ('id', u'M\xfcller')]

Query all user nodes::

    >>> [users[id] for id in users]
    [<User object 'Meier' at ...>, 
    <User object 'M?ller' at ...>, 
    <User object 'Schmidt' at ...>, 
    <User object 'Umhauer' at ...>]
    
    >>> [users[id].context for id in users]
    [<cn=user1,dc=my-domain,dc=com:Meier - False>,
    <cn=user2,ou=customers,dc=my-domain,dc=com:M?ller - False>,
    <cn=user3,ou=customers,dc=my-domain,dc=com:Schmidt - False>,
    <cn=n?sty\2C User,ou=Customers,dc=My-Domain,dc=com:Umhauer - False>]

Authenticate a user, via the user object. (also see 'via LDAPUsers' below,
after passwd, this is to make sure, that LDAPUsers.authenticate does not work
on a cached copy)::

    >>> mueller.authenticate('foo2')
    True
    
    >>> mueller.authenticate('bar')
    False

Change a users password, supplying the old password, via the user object::

    >>> oldpw = 'foo2'
    >>> newpw = 'new'
    >>> mueller.passwd(oldpw, newpw)
    >>> mueller.authenticate('foo2')
    False
    
    >>> mueller.authenticate('new')
    True

And via LDAPUsers::

    >>> oldpw = newpw
    >>> newpw = 'newer'
    >>> users.passwd(mueller.id, oldpw, newpw)

Authenticate a user via LDAPUsers, either by id or by login, but not both. The
id is returned if sucessful, otherwise None::

    >>> users.authenticate('wrong', 'creds')
    False

    >>> users.authenticate(mueller.login, 'newer')
    u'M\xfcller'

    >>> print users.authenticate(id='wrong', pw='cresd')
    False
    
    >>> print users.authenticate(id=mueller.id, pw='bar')
    False
    
    >>> users.authenticate(id=mueller.id, pw='newer')
    u'M\xfcller'

Add a user::

    >>> from node.ext.ldap import ONELEVEL
    >>> def telephoneNumberDefault(_id, **kw):
    ...     # default value callback function
    ...     return '123'
    
    >>> adducfg = UsersConfig(
    ...         baseDN='ou=customers,dc=my-domain,dc=com',
    ...         attrmap={
    ...             'id': 'sn',
    ...             'login': 'cn',
    ...             'rdn': 'cn',
    ...             'telephoneNumber': 'telephoneNumber',
    ...             'sn': 'sn',
    ...             },
    ...         scope=ONELEVEL,
    ...         queryFilter='(objectClass=person)',
    ...         objectClasses=['top', 'person'],
    ...         defaults={
    ...             'sn': 'Surname',
    ...             'telephoneNumber': telephoneNumberDefault,
    ...             },
    ...         )
    >>> users = Users(props, adducfg)

    >>> users.ids
    [u'M\xfcller', u'Schmidt', u'Umhauer']

    >>> users.create('newid')
    Traceback (most recent call last):
      ...
    ValueError: 'cn' needed in node attributes for rdn.

    >>> users.create('newid', login='newcn', id='newid')
    <User object 'newid' at ...>
    
    >>> users.ids
    [u'M\xfcller', u'Schmidt', u'Umhauer', u'newid']

    >>> newuser = users['newid']
    >>> newuser.context
    <cn=newcn,ou=customers,dc=my-domain,dc=com:newid - True>

# XXX: there need more attrs to show up::

    >>> newuser.attrs.items()
    [('telephoneNumber', u'123'), ('id', u'newid'), ('login', u'newcn')]
    
    >>> newuser.context.attrs.items()
    [(u'telephoneNumber', u'123'), 
    (u'sn', u'newid'), 
    (u'cn', u'newcn'), 
    (u'objectClass', ['top', 'person'])]    
    
    >>> users()
    >>> users.reload = True

    >>> users.items()
    [(u'M\xfcller', <User object 'M?ller' at ...>), 
    (u'Schmidt', <User object 'Schmidt' at ...>), 
    (u'Umhauer', <User object 'Umhauer' at ...>), 
    (u'newid', <User object 'newid' at ...>)]

    >>> users['newid'].context
    <cn=newcn,ou=customers,dc=my-domain,dc=com:newid - False>

Delete User::

    >>> del users['newid']
    >>> users.context()

XXX: Review: Search users by criteria OR queryFilter. eg. person, top, foo::

    >>> users = Users(props, ucfg)
    >>> schmidt = users['Schmidt']
    >>> users.search(criteria=dict(sn=schmidt.attrs['sn']), exact_match=True)
    [u'Schmidt']

    >>> users.search()
    [u'Meier', u'M\xfcller', u'Schmidt', u'Umhauer']

XXX: maybe later
    >> users.search(queryFilter='(objectClass=person)')
    [u'Meier', u'M\xfcller', u'Schmidt', u'Umhauer']

    >>> users.search(criteria=dict(sn=schmidt.attrs['sn']), exact_match=False)
    [u'Schmidt']

XXX: this test is propably obsolete, due to non strict aliasing
    >> users.search(criteria=dict(sn=schmidt.attrs['sn']), attrlist=['description'], exact_match=False)
    Traceback (most recent call last):
    ...
    KeyError: 'description'

    >>> users.search(criteria=dict(sn=schmidt.attrs['sn']), attrlist=['login', 'telephoneNumber'], exact_match=False)
    [(u'Schmidt', {'telephoneNumber': [u'1234'], 'login': [u'user3']})]

#    >>> qFilter = LDAPFilter('(objectClass=person)')
#    >>> qFilter |= LDAPFilter('(objectClass=some)')
#    >>> users.search(queryFilter=qFilter, exact_match=False)
#    [u'Meier', u'M\xfcller', u'Schmidt', u'Umhauer']
#
#    >>> cFilter = dict(sn=['meier','schmidt'])
#    >>> users.search(criteria=cFilter, exact_match=False, or_search=False)
#    []
#
#    >>> cFilter = dict(sn=['meier','schmidt'])
#    >>> users.search(criteria=cFilter, exact_match=False, or_search=True)
#    [u'Meier', u'Schmidt']
#
#    >>> users.search(queryFilter=qFilter, criteria=cFilter, exact_match=False, or_search=True)
#    [u'Meier', u'Schmidt']
#
#    >>> from node.ext.ldap.filter import *
#    >>> node = FooNode({'groupattr1': 'Member #1', 'groupattr2':'Member #2', 'groupattr3':'Member #3'})
#    >>> rel_empty = LDAPRelationFilter(node, '')
#    >>> rel_empty.__str__()
#    ''
#
#    >>> rel_empty |= LDAPRelationFilter(node, 'groupattr1:member1')
#    >>> rel_empty.__str__()
#    ''
#
#    >>> rel_empty &= LDAPRelationFilter(node, 'groupattr1:member1')
#    >>> rel_empty.__str__()
#    '(member1=Member #1)'
#
#    >>> rel_single = LDAPRelationFilter(node, 'groupattr1:member1')
#    >>> rel_single.__str__()
#    '(member1=Member #1)'
#
#    >>> rel_double = LDAPRelationFilter(node, 'groupattr1:member1|groupattr2:member2')
#    >>> rel_double.__str__()
#    '(|(member1=Member #1)(member2=Member #2))'
#
#    >>> rel_double &= LDAPFilter('(objectClass=person)')
#    >>> rel_double.__str__()
#    '(&(|(member1=Member #1)(member2=Member #2))(objectClass=person))'

XXX: tests that need to be moved to good locations

#    >>> mueller.attrs['telephoneNumber'] = '9876'
#    >>> users.printtree()
#    <dc=my-domain,dc=com - True>
#      <cn=user2,ou=customers,dc=my-domain,dc=com:M?ller - True>
#      <cn=user1,dc=my-domain,dc=com:Meier - False>
#      <cn=user3,ou=customers,dc=my-domain,dc=com:Schmidt - False>
#      <cn=n?sty\2C User,ou=Customers,dc=My-Domain,dc=com:Umhauer - False>
#    >>> mueller()
#    >>> users.printtree()
#    <dc=my-domain,dc=com - False>
#      <cn=user2,ou=customers,dc=my-domain,dc=com:M?ller - False>
#      <cn=user1,dc=my-domain,dc=com:Meier - False>
#      <cn=user3,ou=customers,dc=my-domain,dc=com:Schmidt - False>
#      <cn=n?sty\2C User,ou=Customers,dc=My-Domain,dc=com:Umhauer - False>
#    >>> from node.ext.ldap.node import queryNode
#    >>> queryNode(props, mueller.DN).attrs
#    {u'objectClass': [u'top', u'person'],
#     u'telephoneNumber': u'9876',
#     u'userPassword': u'foo2',
#     u'cn': u'user2',
#     u'sn': u'M\xfcller'}
#    >>> del users['Müller']
#    >>> users.printtree()
#    <dc=my-domain,dc=com - True>
#      <cn=user2,ou=customers,dc=my-domain,dc=com:M?ller - True>
#      <cn=user1,dc=my-domain,dc=com:Meier - False>
#      <cn=user3,ou=customers,dc=my-domain,dc=com:Schmidt - False>
#      <cn=n?sty\2C User,ou=Customers,dc=My-Domain,dc=com:Umhauer - False>
#    >>> mueller()
#    >>> users.printtree()
#    <dc=my-domain,dc=com - False>
#      <cn=user1,dc=my-domain,dc=com:Meier - False>
#      <cn=user3,ou=customers,dc=my-domain,dc=com:Schmidt - False>
#      <cn=n?sty\2C User,ou=Customers,dc=My-Domain,dc=com:Umhauer - False>

XXX: How does mueller know he is not in ldap anymore?

#    >>> queryNode(props, mueller.DN) is None
#    True
