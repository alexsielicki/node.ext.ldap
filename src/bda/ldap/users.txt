# -*- coding: utf-8 -*-

Import test users.
::

    >>> import os
    >>> from subprocess import call
    >>> from bda.ldap.filter import LDAPFilter
    >>> testldif = os.environ.get('PRINCSLDIF')
    >>> ldapaddbin = os.environ.get('LDAPADDBIN')

    >>> binddn = "cn=Manager,dc=my-domain,dc=com"
    >>> bindpw = "secret"
    >>> cmd = [ldapaddbin, '-f', testldif, '-x', '-D',
    ...        '%s' % binddn, '-w', bindpw, '-c', '-a',
    ...        '-p', '12345', '-h', '127.0.0.1']
    >>> retcode = call(cmd)


Get an LDAPUsers node and configure it. In addition to the key attribute, the
login attribute also needs to be unique, which will be checked upon calling
ids() the first time.
::

    >>> from bda.ldap.properties import LDAPProps
    >>> from bda.ldap.users import LDAPUsers, LDAPUsersConfig
    >>> from bda.ldap import SUBTREE

    >>> user = 'cn=Manager,dc=my-domain,dc=com'
    >>> pwd = 'secret'
    >>> props = LDAPProps('127.0.0.1', 12345, user, pwd, cache=False)

    >>> ucfg = LDAPUsersConfig(props,
    ...                        baseDN='dc=my-domain,dc=com',
    ...                        id_attr='sn',
    ...                        login_attr='description',
    ...                        scope=SUBTREE,
    ...                        queryFilter='(objectClass=person)',
    ...                        )
    >>> users = LDAPUsers(ucfg)

Query all user ids. ``description`` is missing on some.
::

    >>> users.ids()
    Traceback (most recent call last):
    ...
    KeyError:
      u"Secondary key 'description' missing on: cn=user1,dc=my-domain,dc=com."

Query all user ids. ``telephoneNumber`` is not uniqe.
::

    >>> ucfg.login_attr = 'telephoneNumber'
    >>> users = LDAPUsers(ucfg)
    >>> users.ids()
    Traceback (most recent call last):
    ...
    KeyError: u"Secondary key not unique: telephoneNumber='1234'."

Query all user ids. ``cn`` finally in this case is unique and therefore
suitable as login attr.
::
    >>> ucfg.login_attr = 'cn'
    >>> users = LDAPUsers(ucfg)
    >>> users.ids()
    [u'Meier', u'M\xfcller', u'Schmidt', u'Umhauer']

Query a user by id (utf-8 or unicode).
::

    >>> mueller = users['Müller']
    >>> mueller
    <cn=user2,ou=customers,dc=my-domain,dc=com:M?ller - False>

The '?' is just __repr__ going to ascii, the id is in proper unicode.
::

    >>> mueller.id
    u'M\xfcller'

A user has a login.
::

    >>> mueller.login
    u'user2'

And attributes.
::

    >>> mueller.attrs
    {u'objectClass': [u'top', u'person'],
     u'telephoneNumber': u'1234',
     u'userPassword': u'foo2',
     u'cn': u'user2',
     u'sn': u'M\xfcller'}

Query all user nodes.
::

    >>> [users[id] for id in users]
    [<cn=user1,dc=my-domain,dc=com:Meier - False>,
    <cn=user2,ou=customers,dc=my-domain,dc=com:M?ller - False>,
    <cn=user3,ou=customers,dc=my-domain,dc=com:Schmidt - False>,
    <cn=n?sty\2C User,ou=Customers,dc=My-Domain,dc=com:Umhauer - False>]

Authenticate a user, via the user object. (also see 'via LDAPUsers' below,
after passwd, this is to make sure, that LDAPUsers.authenticate does not work
on a cached copy).
::

    >>> mueller.authenticate('foo2')
    True
    >>> mueller.authenticate('bar')
    False

Change a users password, supplying the old password, via the user object.
::

    >>> oldpw = 'foo2'
    >>> newpw = 'new'
    >>> mueller.passwd(oldpw, newpw)
    >>> mueller.authenticate('foo2')
    False
    >>> mueller.authenticate('new')
    True

And via LDAPUsers.
::
    >>> oldpw = newpw
    >>> newpw = 'newer'
    >>> users.passwd(mueller.id, oldpw, newpw)

Authenticate a user via LDAPUsers, either by id or by login, but not both. The
id is returned if sucessful, otherwise None.
::

    >>> print users.authenticate(id=mueller.id, pw='bar')
    None
    >>> users.authenticate(id=mueller.id, pw='newer')
    u'M\xfcller'
    >>> users.authenticate(login=mueller.login, pw='newer')
    u'M\xfcller'
    >>> users.authenticate(id=mueller.id, login=mueller.login, pw='new')
    Traceback (most recent call last):
    ...
    ValueError: Either specify id or login, not both.

Find a user by login.
::

    >>> users.idbylogin(mueller.login) == mueller.id
    True

XXX - Review: Search users by criteria OR queryFilter. eg. person, top, foo.
::

    >>> schmidt = users['Schmidt']
    >>> users.search(criteria=dict(sn=schmidt.attrs['sn']), exact_match=True)
    u'Schmidt'

    >>> users.search(queryFilter='(objectClass=person)')
    [u'Meier', u'M\xfcller', u'Schmidt', u'Umhauer']

    >>> users.search(criteria=dict(sn=schmidt.attrs['sn']), exact_match=False)
    [u'Schmidt']

    >>> users.search(criteria=dict(sn=schmidt.attrs['sn']), attrlist=['description'], exact_match=False)
    [(u'Schmidt', {u'description': [u'foo']})]

    >>> users.search(criteria=dict(sn=[schmidt.attrs['sn'], mueller.attrs['sn']]), attrlist=['description'], exact_match=False)
    []

Add a user.
::


Make sure it is in the right location.
::


XXX: tests that need to be moved to good locations

    >>> mueller.attrs['telephoneNumber'] = '9876'
    >>> users.printtree()
    <dc=my-domain,dc=com - True>
      <cn=user2,ou=customers,dc=my-domain,dc=com:M?ller - True>
      <cn=user1,dc=my-domain,dc=com:Meier - False>
      <cn=user3,ou=customers,dc=my-domain,dc=com:Schmidt - False>
      <cn=n?sty\2C User,ou=Customers,dc=My-Domain,dc=com:Umhauer - False>
    >>> mueller()
    >>> users.printtree()
    <dc=my-domain,dc=com - False>
      <cn=user2,ou=customers,dc=my-domain,dc=com:M?ller - False>
      <cn=user1,dc=my-domain,dc=com:Meier - False>
      <cn=user3,ou=customers,dc=my-domain,dc=com:Schmidt - False>
      <cn=n?sty\2C User,ou=Customers,dc=My-Domain,dc=com:Umhauer - False>
    >>> from bda.ldap.node import queryNode
    >>> queryNode(props, mueller.DN).attrs
    {u'objectClass': [u'top', u'person'],
     u'telephoneNumber': u'9876',
     u'userPassword': u'foo2',
     u'cn': u'user2',
     u'sn': u'M\xfcller'}
    >>> del users['Müller']
    >>> users.printtree()
    <dc=my-domain,dc=com - True>
      <cn=user2,ou=customers,dc=my-domain,dc=com:M?ller - True>
      <cn=user1,dc=my-domain,dc=com:Meier - False>
      <cn=user3,ou=customers,dc=my-domain,dc=com:Schmidt - False>
      <cn=n?sty\2C User,ou=Customers,dc=My-Domain,dc=com:Umhauer - False>
    >>> mueller()
    >>> users.printtree()
    <dc=my-domain,dc=com - False>
      <cn=user1,dc=my-domain,dc=com:Meier - False>
      <cn=user3,ou=customers,dc=my-domain,dc=com:Schmidt - False>
      <cn=n?sty\2C User,ou=Customers,dc=My-Domain,dc=com:Umhauer - False>

XXX: How does mueller know he is not in ldap anymore?

    >>> queryNode(props, mueller.DN) is None
    True
