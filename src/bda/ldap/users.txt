# -*- coding: utf-8 -*-

Import test users.
::

    >>> import os
    >>> from subprocess import call
    >>> testldif = os.environ.get('USERLDIF')
    >>> ldapaddbin = os.environ.get('LDAPADDBIN')

    >>> binddn = "cn=Manager,dc=my-domain,dc=com"
    >>> bindpw = "secret"
    >>> cmd = [ldapaddbin, '-f', testldif, '-x', '-D',
    ...        '%s' % binddn, '-w', bindpw, '-c', '-a',
    ...        '-p', '12345', '-h', '127.0.0.1']
    >>> retcode = call(cmd)


Get an LDAPUsers node and configure it.
::

    >>> from bda.ldap.properties import LDAPProps
    >>> from bda.ldap.users import LDAPUsers, LDAPUsersConfig
    >>> from bda.ldap import SUBTREE

    >>> user = 'cn=Manager,dc=my-domain,dc=com'
    >>> pwd = 'secret'
    >>> props = LDAPProps('127.0.0.1', 12345, user, pwd, cache=False)
    >>> ucfg = LDAPUsersConfig(props,
    ...                        baseDN='dc=my-domain,dc=com',
    ...                        id_attr='sn',
    ...                        login_attr='cn',
    ...                        scope=SUBTREE,
    ...                        queryFilter='(objectClass=person)',
    ...                        )
    >>> users = LDAPUsers(ucfg)

Query all user ids.
::

    >>> users.ids()
    [u'Meier', u'M\xfcller', u'Schmidt', u'Umhauer']

Query a user by id (utf-8 or unicode).
::

    >>> mueller = users['MÃ¼ller']
    >>> mueller
    <cn=user2,ou=customers,dc=my-domain,dc=com:M?ller - False>

The '?' is just __repr__ going to ascii, the id is in proper unicode.
::

    >>> mueller.id
    u'M\xfcller'

A user has a login.
::

    >>> mueller.login
    u'user2'

And attributes.
::

    >>> mueller.attrs
    {u'objectClass': [u'top', u'person'],
     u'userPassword': u'foo2',
     u'cn': u'user2',
     u'sn': u'M\xfcller'}

Query all user nodes.
::

    >>> [users[x] for x in users]
    [<cn=user1,dc=my-domain,dc=com:Meier - False>,
    <cn=user2,ou=customers,dc=my-domain,dc=com:M?ller - False>,
    <cn=user3,ou=customers,dc=my-domain,dc=com:Schmidt - False>,
    <cn=n?sty\2C User,ou=Customers,dc=My-Domain,dc=com:Umhauer - False>]

Authenticate a user, via the user object. (also see 'via LDAPUsers' below,
after passwd, this is to make sure, that LDAPUsers.authenticate does not work
on a cached copy).
::

    >>> mueller.authenticate('foo2')
    True
    >>> mueller.authenticate('bar')
    False

Change a users password, supplying the old password, via the user object.
::

    >>> oldpw = 'foo2'
    >>> newpw = 'new'
    >>> mueller.passwd(oldpw, newpw)
    >>> mueller.authenticate('foo2')
    False
    >>> mueller.authenticate('new')
    True

And via the LDAPUsers.
::
    >>> oldpw = newpw
    >>> newpw = 'newer'
    >>> users.passwd(mueller.id, oldpw, newpw)

Authenticate a user via LDAPUsers, either by id or by login, but not both. The
id is returned if sucessful, otherwise None.
::

    >>> print users.authenticate(id=mueller.id, pw='bar')
    None
    >>> users.authenticate(id=mueller.id, pw='newer')
    u'M\xfcller'
    >>> users.authenticate(login=mueller.login, pw='newer')
    u'M\xfcller'
    >>> users.authenticate(id=mueller.id, login=mueller.login, pw='new')
    Traceback (most recent call last):
    ...
    ValueError: Either specify id or login, not both.

Find a user by login.
::


Search users by criteria.
::

#    >>> users.search(criteria=dict(sn=mueller.attrs['sn']), exact_match=True)


Add a user.
::


Make sure it is in the right location.
::
